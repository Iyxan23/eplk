func-definition         = FUN IDENTIFIER PAREN_OPEN IDENTIFIER [COMMA IDENTIFIER]* PAREN_CLOSE NEWLINE* [[ARROW expression] | BRACES_OPEN statements BRACES_CLOSE]

while-expression        = WHILE PAREN_OPEN expression PAREN_CLOSE [[BRACES_OPEN statements BRACES_CLOSE] | expression]

for-expression          = FOR PAREN_OPEN expression1 SEMICOLON expression2 SEMICOLON expression3 PAREN_CLOSE expression

if-expression           = IF PAREN_OPEN expression PAREN_CLOSE expression
                          [ELIF PAREN_OPEN expression PAREN_CLOSE expression]*
                          ELSE expression

list-expression         = BRACKET_OPEN [expression [COMMA expression]]* BRACKET_CLOSE

atom                    = INT_LITERAL |
                          FLOAT_LITERAL |
                          IDENTIFIER |
                          STRING_LITERAL |
                          [PAREN_OPEN expression* PAREN_CLOSE] |
                          [TRUE|FALSE] |
                          list-expression |
                          if-expression |
                          for-expression |
                          while-expression |
                          fun-definition

increment-decrement     = atom [DOUBLE_PLUS | DOUBLE_MINUS]

func-call               = increment-decrement [PAREN_OPEN [expression [COMMA expression]*] PAREN_CLOSE]

index                   = func-call [BRACKET_OPEN expression BRACKET_CLOSE]

power                   = index [POW factor]*
factor                  = [[PLUS|MINUS] factor] | power
term                    = factor [[MUL|DIV] factor]*
arithmetic-expression   = term [[PLUS|MINUS] term]*

comparison-expression   = NOT comparison-expression |
                          arithmetic-expression [[comparison operators] arithmetic-expression]*

expression              = KEYWORD:VAR IDENTIFIER EQUAL expression |
                          comparison-expression [[AND|OR] comparison-expression]*

statements              = NEWLINE* expression [NEWLINE+ expression]* NEWLINE*